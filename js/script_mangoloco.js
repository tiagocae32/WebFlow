if ("/aanmelden" === window.location.pathname) {
  class e {
    constructor(e) { this.steps = e, this.currentStepIndex = 0, this.formData = {}, this.citiesList = [], this.initEnums(), this.initStepRules(), this.initElements(), this.sideEffects = !1, this.cities = [], this.citiesNameSelected = [], this.cbr_locations = [], this.cbrs_list = [], this.stepHistory = [], this.initBirthDateInput(), this.initFormInputEvents(), this.urls = { payment_link: "https://api.develop.nutheorie.be/api/applications/payment_link/", package_start: "https://api.develop.nutheorie.be/api/applications/set_package_start/", final_redirect_url: "https://develop.nutheorie.be/user-profile", fail_redirect_url: "https://develop.nutheorie.be/betaling/failed", cities: "https://api.develop.nutheorie.be/api/cities/", cbrsLocations: "https://api.develop.nutheorie.be/api/applications/exam_locations/", plans: "https://api.develop.nutheorie.be/api/applications/online_plans/", urlPostMultiStepForm: "https://api.develop.nutheorie.be/api/applications/" }, this.dutchMonths = ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December",], this.resumeConfig = { license_type: { elementId: "licenseText", textMap: { motor: "Motortheorie", auto: "Autotheorie", scooter: "Scootertheorie" } }, course_type: { elementId: "courseTypeText", textMap: { online: "Volledige online cursus", offline: "Dagcursus met aansluitend het examen: 99,-" } }, exam_type: { elementId: "examTypeText", textMap: { 1: "Standaard CBR examen (30 min): 48,-", 2: "Verlengd CBR examen (45 min): 61,-", 3: "Ik heb zelf al een examen gereserveerd" } }, cities: { elementId: "citiesText", customHandler: this.completeCities }, cbr_locations: { elementId: "cbrLocationsText", customHandler: this.completeCbrLocations }, course_category: { elementId: null, customHandler: this.completeCourseCategory }, course_dates: { elementId: "specifiekeDates", customHandler: this.completeCourseDates }, course_names: { elementId: null, customHandler: this.completeCourseNames }, package_name: { elementId: "overzichtRight", customHandler: this.completePackage } }, this.resumeConfigInputs = { first_name: { elementId: "firstNameText" }, last_name: { elementId: "lastNameText" }, nickname: { elementId: "nicknameText" }, birth_date: { elementId: "birthDateText" }, email: { elementId: "emailText" }, phone: { elementId: "phoneText" }, address_1: { elementId: "address1Text" }, address_2: { elementId: "address2Text" }, address_3: { elementId: "address3Text" } }, this.loaderContainer = document.getElementById("loader"), this.loaderFetch = !1 } initStepRules() { this.sectionRules = { license_type: { auto: "step2", motor: "step2", scooter: "step2" }, course_type: { offline: "step3", online: "step3" }, exam_type: { offline: { 1: "step4Cities", 2: "step4Cities", 3: "step4Mijn" }, online: { 1: "step4Cbr", 2: "step4Cbr", 3: "step4Mijn" }, common: "step4Mijn" }, course_category: { per_dates: "step6", per_month: "stepMonths", calendar: "stepCalendar" } }, this.nextStepRules = { step4Cities: "step5", step4Cbr: "step5", step4Mijn: { offline: "stepInputs", online: "stepOnlinePackage" }, step5: { common: "stepInputs" }, step6: { offline: "stepInputs", online: "stepOnlinePackage" }, stepMonths: { offline: "stepInputs", online: "stepOnlinePackage" }, stepCalendar: { offline: "stepInputs", online: "stepOnlinePackage" }, stepInputs: "overzicht" }, this.submissionRules = { course_type: { offline: ["cbr_locations"], online: ["cities"] }, course_category: { per_dates: ["course_dates"], per_month: ["course_dates"], calendar: ["course_names"] } } } initEnums() { this.LicenseTypesEnum = Object.freeze({ AUTO: "auto", SCOOTER: "scooter", MOTOR: "motor" }), this.PRODUCTS_LIST = { BTH: "bth", BTH_VE: "bth_ve", ATH: "ath", ATH_VE: "ath_ve", AMTH: "amth", AMTH_VE: "amth_ve", MIJN: "mijn" } } initElements() { this.nextButton = document.getElementById("btn-next"), this.nextButtonText = document.getElementById("btnText"), this.prevButton = document.getElementById("btn-prev"), this.nextButton.addEventListener("click", () => this.nextStep()), this.prevButton.addEventListener("click", () => this.prevStep()), document.addEventListener("click", e => this.handleFormClick(e)), document.addEventListener("input", e => this.handleFormInput(e)) } initialize() { this.updateStepIndexText(), this.setInitialLicenseTypeFromURL(), this.setInitialLicenseTypeUI(), this.setInitialCourseTypeFromURL(), this.setInitialCourseTypeUI(), this.stepHistory.push(this.steps[this.currentStepIndex].id), this.showFormForStep(this.currentStepIndex) } convertDate() { let e = this.convertDateToISO(this.formData.birth_date); this.formData.birth_date = e } convertDateToISO(e) { let t = e.split("-"); return 3 === t.length ? `${t[2]}-${t[1]}-${t[0]}` : e } getURLParameter(e) { let t = new URLSearchParams(window.location.search); return t.get(e) } setInitialLicenseTypeFromURL() { let e = this.getURLParameter("license_type"); e && (this.formData.license_type = e, this.stepHistory.push(this.steps[0].id, this.steps[1].id), this.currentStepIndex = 1) } setInitialLicenseTypeUI() { let e = this.formData.license_type; if (e) { let t = document.querySelectorAll("[data-license-type]"); t.forEach(t => { t.getAttribute("data-license-type") === e ? t.classList.add("selected-course") : t.classList.remove("selected-course") }) } } setInitialCourseTypeFromURL() { let e = this.getURLParameter("course_type"); e && (this.formData.course_type = e, this.formData.license_type && (this.stepHistory = [this.steps[0].id, this.steps[1].id], this.currentStepIndex = 2, this.calculateTotalSteps(), this.updateStepIndexText())) } setInitialCourseTypeUI() { let e = this.formData.course_type; if (e) { let t = document.querySelectorAll("[data-course-type]"); t.forEach(t => { t.getAttribute("data-course-type") === e ? t.classList.add("selected-course") : t.classList.remove("selected-course") }) } } redirectTo(e) { window.location.href = e } nextStep() { window.scrollTo({ top: 0, behavior: "smooth" }); let e = this.getCurrentStepId(), t = this.getNextStepId(e); if ("overzicht" === e) { this.handleFinalStep(); return } "step4Mijn" === e && this.setTimeInput(), "step4Mijn" !== e || "offline" !== this.formData.course_type || this.formData.cities || (this.formData.cities = []); let i = this.steps.findIndex(e => e.id === t); -1 !== i && (this.currentStepIndex = i, this.stepHistory.push(t), this.showFormForStep(this.currentStepIndex)), this.updateStepIndexText() } prevStep() { if (window.scrollTo({ top: 0, behavior: "smooth" }), this.stepHistory.length > 1) { this.stepHistory.pop(); let e = this.stepHistory[this.stepHistory.length - 1]; this.currentStepIndex = this.steps.findIndex(t => t.id === e), this.showFormForStep(this.currentStepIndex), this.updateStepIndexText() } } getCurrentStepId() { return this.stepHistory[this.stepHistory.length - 1] } getNextStepId(e) { let t = this.steps.find(t => t.id === e), i = t.keyBack, a = this.formData[i], s = this.sectionRules[i]; if (s && s[a] && "object" != typeof s[a]) return s[a]; if ("exam_type" === i) { let n = this.formData.course_type; return s && s[n] && s[n][a] || this.nextStepRules.common } let l = this.nextStepRules[e]; if (l) { if ("string" == typeof l) return l; if ("object" == typeof l) return l[this.formData.course_type] || l.common } return this.steps[this.currentStepIndex + 1]?.id } cleanInterface(e) { e.innerHTML = "" } enableButton() { this.nextButton.classList.remove("disabled-button") } disableButton() { this.nextButton.classList.add("disabled-button") } enableLoader() { this.loaderContainer.style.display = "block" } disableLoader() { this.loaderContainer.style.display = "none" } isLastStep() { return this.currentStepIndex === this.steps.length - 1 } applyLastStepChanges() { this.changeBtn("Verzenden"), this.convertDate(), this.handleProductMijnReservation(); let e = this.applySubmissionRules(); 3 === Number(e.exam_type) && this.formatDateMijnFlow(), this.completeResume(), this.nextButton.addEventListener("click", () => { this.sendDataBack(e) }) } changeBtn(e) { this.nextButtonText.innerText = e } hideAllForms() { let e = document.querySelectorAll(".form-step"); e.forEach(e => { e.classList.remove("active") }) } showFormForStep() { this.hideAllForms(); let e = this.getCurrentStepId(); this.toggleButtonsVisibility("overzicht" !== e); let t = document.querySelector(`.form-step[data-step-id="${e}"]`), i = document.getElementById("stepIndexWrapper"); "overzicht" === e ? (i.classList.add("hide"), this.prevButton.removeEventListener("click", this.prevStep), this.nextButton.removeEventListener("click", this.nextStep), this.prevButton.id = "btnPrevLast", this.nextButton.id = "btnSend", document.getElementById("btnPrevLast").addEventListener("click", this.prevStep.bind(this)), document.getElementById("btnSend").addEventListener("click", this.nextStep.bind(this))) : (i.classList.remove("hide"), this.prevButton.id = "btn-prev", this.nextButton.id = "btn-next"), t && (t.classList.add("active"), this.updateNextButtonState()), this.handleSideEffects(), this.updateProgressBar() } toggleButtonsVisibility(e) { let t = document.getElementById("btnWrapper"); e ? t.classList.remove("hide") : t.classList.add("hide") } handleFormClick(e) { let t = e.target, i = t.closest(".form-step"); if (i) { let { keyBack: a, attribute: s, keyArray: n } = this.steps[this.currentStepIndex], l = t.getAttribute(s); l && (this.formData[a] = n ? [l] : l) } this.isLastStep() || this.noSideEffects || this.updateNextButtonState() } formatBirthDate(e) { let t = e.replace(/[^0-9\-]/g, ""); return (2 === (t = t.slice(0, 10)).length || 5 === t.length) && this.lastFormattedValue && t.length > this.lastFormattedValue.length && (t += "-"), this.lastFormattedValue = t, t } validateDate(e) { let t = e.split("-"); if (3 !== t.length) return !1; let i = parseInt(t[0], 10), a = parseInt(t[1], 10), s = parseInt(t[2], 10); if (isNaN(i) || isNaN(a) || isNaN(s) || s < 1900 || s > new Date().getFullYear() || a < 1 || a > 12 || i < 1 || i > 31) return !1; if (2 === a) { if (i > 29 || 29 === i && !(s % 4 == 0 && (s % 100 != 0 || s % 400 == 0))) return !1 } else if ([4, 6, 9, 11].includes(a) && i > 30) return !1; return !0 } initBirthDateInput() { let e = document.getElementById("birthDateInput"); e.addEventListener("input", e => { let t = e.target.value, i = this.formatBirthDate(t); e.target.value = i }) } initFormInputEvents() { let e = document.querySelectorAll('.form_step input[type="text"]'); e.forEach(e => { e.addEventListener("blur", this.handleInputBlur.bind(this)) }) } handleInputBlur(e) { let t = e.target, i = t.getAttribute("data-error-hint-id"), a = document.getElementById(i), s = !0, n = ""; t.value.trim() ? "email" !== t.getAttribute("data-key-back") || this.isValidEmail(t.value) || (n = "E-mail is niet geldig", s = !1) : (n = "Dit veld is verplicht", s = !1), s ? a.style.display = "none" : (a.textContent = n, a.style.display = "block"), this.updateButtonState() } handleFormInput(e) { if ("stepInputs" === this.getCurrentStepId()) { let t = e.target, i = t.getAttribute("data-key-back"); if ("birth_date" === i) { let a = this.formatBirthDate(t.value); t.value = a, this.formData[i] = a; let s = document.getElementById("birthDateError"); this.validateDate(a) ? s.style.display = "none" : (s.textContent = "Voer een geboortedatum in", s.style.display = "block") } else this.formData[i] = t.value; this.updateButtonState() } } updateButtonState() { this.isValidEmail(this.formData.email) && this.validateDate(this.formData.birth_date) && this.areAllRequiredInputsFilled() && document.getElementById("checkbox").checked ? this.enableButton() : this.disableButton() } areAllRequiredInputsFilled() { return ["first-name", "last-name", "tel", "address", "postal-code", "woonplaats"].map(e => document.getElementById(e)).filter(e => null != e).every(e => "" !== e.value.trim()) } isValidEmail = e => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e); isStepInvalid() { let e = this.steps[this.currentStepIndex]; if (e.keysBack) return e.keysBack.some(e => { let t = this.formData[e]; return !t || "string" == typeof t && "" === t.trim() }); if (e.keyBack && this.formData.hasOwnProperty(e.keyBack)) { let t = this.formData[e.keyBack]; return Array.isArray(t) ? 0 === t.length : "string" == typeof t && "" === t.trim() } return !0 } updateStepIndexText() { let e = this.stepHistory.length; 2 === this.currentStepIndex && 2 === this.stepHistory.length ? e += 1 : 0 === e && (e = 1), this.stepHistory.includes("overzicht") && (e -= 1); let t = this.calculateTotalSteps(), i = document.getElementById("stepIndexText"), a = document.getElementById("stepIndexTextMobile"); i && (i.textContent = `${e} van ${t}`), a && (a.textContent = `${e} van ${t}`) } calculateTotalSteps() { let e = this.formData.course_type, t = this.isMijnReservation(); return "offline" === e ? t ? 5 : 7 : t ? 6 : 8 } isMijnReservation() { return "3" === this.formData.exam_type } updateNextButtonState() { if (this.isLastStep()) this.enableButton(), this.applyLastStepChanges(); else { this.changeBtn("Volgende"); let e = this.isStepInvalid(); e ? this.disableButton() : this.enableButton() } } handleSideEffects() { let e = this.getCurrentStepId(); switch (e) { case "step4Cities": this.getCities(), this.sideEffects = !0; break; case "step4Cbr": this.getCbrLocations(), this.sideEffects = !0; break; case "stepOnlinePackage": this.getPackages(), this.sideEffects = !0; case "step4Mijn": this.getCbrLocations(!1), this.setTimeInput(), this.buildInput(); case "stepMonths": this.handleStepMonths(); break; case "stepCalendar": this.initializeCalendar(); default: this.sideEffects = !1 } } getData() { return this.formData } setData(e, t) { this.formData[e] = t } calculateProgressPercentage() { let e = this.stepHistory.length || 1, t = this.calculateTotalSteps(); e > 1 && e--; let i = t > 1 ? Math.round(e / t * 100) : 0; return i } updateProgressBar() { let e = document.getElementById("progressFill"), t = this.calculateProgressPercentage(); e.style.width = `${t}%` } handleProductMijnReservation() { let e = this.getProduct(), t = this.isMijnReservation(); this.setData("product", e), this.setData("is_mijn_reservation", t) } isMijnReservation() { return 3 === Number(this.formData.exam_type) } getProduct() { let e = this.formData.license_type, t = Number(this.formData.exam_type), i = this.PRODUCTS_LIST, a; switch (e) { case this.LicenseTypesEnum.MOTOR: a = 1 === t || 3 === t ? i.ATH : i.ATH_VE; break; case this.LicenseTypesEnum.SCOOTER: a = 1 === t || 3 === t ? i.AMTH : i.AMTH_VE; break; default: a = 1 === t || 3 === t ? i.BTH : i.BTH_VE }return a } async getCities() { if (0 === this.citiesList.length) try { this.enableLoader(); let e = await fetch(this.urls.cities), t = await e.json(); this.citiesList = t.filter(e => e.license_types.includes(this.formData.license_type) && 53 !== e.id) } catch (i) { console.log(i) } finally { this.disableLoader() } this.createOptions(this.citiesList, "step4", !0) } generateDutchMonths() { let e = new Date().getMonth(), t = this.dutchMonths.slice(e, e + 6); return t.map(e => e) } handleStepMonths() { let e = this.generateDutchMonths(); this.createOptions(e, "stepMonthsList", !1) } handleTextChanceMonths() { let e = this.formData.course_names, t = new Date, i = t.getDate() >= 5, a; a = 0 === e.length ? "- (selecteer data)" : 1 === e.length && this.isActualMonth(e[0]) && i ? " klein-gemiggeld" : " gemiggeld-groot"; let s = document.getElementById("chanceMonths"); s && (s.textContent = a) } isActualMonth(e) { return this.dutchMonths.indexOf(e) === new Date().getMonth() } createOptions(e, t, i = !0) { let a = document.getElementById(t); this.cleanInterface(a); let s = i ? "cities" : "course_names"; e.forEach(t => { let n = document.createElement("div"); n.className = "aanmelden_step4-checkbox-item", n.addEventListener("click", () => { this.toggleOptionSelection(t, n, i), this.updateNextButtonState(), i || this.handleTextChanceMonths(e) }); let l = document.createElement("p"); l.className = "text-weight-bold is-tiny-mobile", l.textContent = i ? t.name : t, n.appendChild(l), a.appendChild(n); let r = i ? t.id : t; this.formData[s] && this.formData[s].includes(r) && n.classList.add("active") }) } toggleOptionSelection(e, t, i) { let a = i ? "cities" : "course_names", s = i ? e.id : e; if (Array.isArray(this.formData[a]) || (this.formData[a] = []), this.formData[a].includes(s)) { let n = this.formData[a].indexOf(s); if (this.formData[a].splice(n, 1), i) { let l = this.citiesNameSelected.indexOf(e.name); -1 !== l && this.citiesNameSelected.splice(l, 1) } t.classList.remove("active") } else this.formData[a].push(s), i && this.citiesNameSelected.push(e.name), t.classList.add("active") } async getCbrLocations(e = !0) { if (0 === this.cbrs_list.length) try { this.enableLoader(); let t = await fetch(this.urls.cbrsLocations), i = await t.json(); this.cbrs_list = i, e && this.createCbrElements(this.cbrs_list) } catch (a) { console.log(a) } finally { this.disableLoader() } else e && this.createCbrElements(this.cbrs_list) } createCbrsSelect(e) { let t = document.getElementById("selectCbrs"); e.forEach(e => { let i = document.createElement("option"); i.value = e, i.text = e, t.add(i) }), t.addEventListener("change", e => { let t = e.target.value; this.setData("mijn_exam_location", t) }) } setTimeInput() { let e = document.getElementById("dateInput"), t = new Date, i = t.toISOString().split("T")[0]; e.min = i, this.datePicked = fechaGlobalSeleccionada, e.addEventListener("change", e => { this.datePicked = fechaGlobalSeleccionada }) } buildInput() { let e = document.getElementById("timeInput"), t = document.getElementById("timeError"); e.addEventListener("input", e => { let i = e.target.value.replace(/[^0-9]/g, ""); if (i.length > 2 && (i = i.substring(0, 2) + ":" + i.substring(2, 4)), e.target.value = i, 5 === i.length) { let [a, s] = i.split(":").map(Number); a > 23 || s > 59 ? (t.style.display = "block", this.setData("mijn_exam_datetime", ""), this.timePicked = "") : (t.style.display = "none", this.timePicked = `${a}:${s}`, this.setData("mijn_exam_datetime", this.timePicked)) } else t.style.display = "none" }) } formatDateMijnFlow() { this.datePicked && this.timePicked ? this.setData("mijn_exam_datetime", `${this.datePicked}T${this.timePicked}:00+01:00`) : this.setData("mijn_exam_datetime", "") } createCbrElements(e) { let t = document.getElementById("step4check"); t.hasChildNodes() ? e.forEach((e, i) => { let a = t.querySelector(`input[name="${e}"]`); a && (a.checked = this.formData.cbr_locations?.includes(e)) }) : (this.cleanInterface(t), e.forEach((e, i) => { let a = document.createElement("div"); a.className = "aanmelden_step4-list_item"; let s = document.createElement("label"); s.className = "w-checkbox aanmelden_step4-item"; let n = document.createElement("div"); n.className = "w-checkbox-input w-checkbox-input--inputType-custom aanmelden_step4-item_checkbox"; let l = document.createElement("input"); l.type = "checkbox", l.id = i, l.name = e, l.style.opacity = 0, l.style.position = "absolute", l.style.zIndex = -1; let r = document.createElement("span"); r.className = "text-weight-bold w-form-label", r.setAttribute("for", e), r.textContent = e, s.appendChild(n), s.appendChild(l), s.appendChild(r), a.appendChild(s), t.appendChild(a), this.formData.cbr_locations?.includes(e) && (l.checked = !0, n.classList.add("checked")), l.addEventListener("click", () => { this.toggleCbrSelection(e), this.updateNextButtonState() }) })) } toggleCbrSelection(e) { Array.isArray(this.formData.cbr_locations) || (this.formData.cbr_locations = []); let t = this.formData.cbr_locations.indexOf(e); -1 === t ? this.formData.cbr_locations.push(e) : this.formData.cbr_locations.splice(t, 1) } toggleCbrSelection(e) { Array.isArray(this.formData.cbr_locations) || (this.formData.cbr_locations = []); let t = this.formData.cbr_locations.indexOf(e); -1 === t ? this.formData.cbr_locations.push(e) : this.formData.cbr_locations.splice(t, 1) } initializeCalendar() { this.todayCalendar = new Date, this.currentMonthCalendar = this.todayCalendar.getMonth(), this.currentYearCalendar = this.todayCalendar.getFullYear(), this.selectedDates = new Set, this.calendarElement = document.getElementById("calendar"), this.monthLabel = document.getElementById("monthLabel"), this.yearLabel = document.getElementById("yearLabel"), this.chanceElement = document.getElementById("chance"), this.initializeCalendarButtons(), this.renderCalendarForMonthYear(this.currentMonthCalendar, this.currentYearCalendar) } initializeCalendarButtons() { let e = document.getElementById("prev"), t = document.getElementById("next"); e && e.addEventListener("click", e => { e.preventDefault(), 0 === this.currentMonthCalendar ? (this.currentMonthCalendar = 11, this.currentYearCalendar--) : this.currentMonthCalendar--, this.renderCalendarForMonthYear(this.currentMonthCalendar, this.currentYearCalendar) }), t && t.addEventListener("click", e => { e.preventDefault(), 11 === this.currentMonthCalendar ? (this.currentMonthCalendar = 0, this.currentYearCalendar++) : this.currentMonthCalendar++, this.renderCalendarForMonthYear(this.currentMonthCalendar, this.currentYearCalendar) }) } renderCalendarForMonthYear(e, t) { this.monthLabel.textContent = this.generateDutchMonths()[e], this.yearLabel.textContent = t.toString(); let i = new Date(t, e, 1).getDay(), a = 32 - new Date(t, e, 32).getDate(), s = '<table class="calendar-table"><thead><tr>';["Ma", "Di", "Wo", "Do", "Vr", "Za", "Zo"].forEach(e => { s += `<th>${e}</th>` }), s += "</tr></thead><tbody><tr>"; let n = 0 === i ? 6 : i - 1, l = new Date(t, e, 0), r = l.getDate(); for (let o = 0; o < n; o++)s += `<td class="not-current-month disabled">${r - n + o + 1}</td>`; for (let d = 1; d <= a; d++) { let c = new Date(t, e, d), h = c.toISOString().split("T")[0], m = this.isDateEnabled(c) ? "" : "disabled"; m += this.selectedDates.has(h) ? " selected-date" : "", s += `<td class="${m}" data-date="${h}">${d}</td>`, (n + d) % 7 == 0 && d !== a && (s += "</tr><tr>") } let p = 1; for (; (n + a + p - 1) % 7 != 0;)s += `<td class="not-current-month disabled">${p}</td>`, p++; s += "</tr></tbody></table>", this.calendarElement.innerHTML = s, this.addEventListenersToDays() } isDateEnabled(e) { let t = new Date, i = new Date(t.getFullYear(), t.getMonth() + 5, t.getDate()); return e <= i && e >= t && 6 !== e.getDay() && 0 !== e.getDay() } addEventListenersToDays() { let e = this.calendarElement.querySelectorAll("td:not(.disabled):not(.not-current-month)"); e.forEach(e => { e.addEventListener("click", () => { let t = e.getAttribute("data-date"); this.selectedDates.has(t) ? (this.selectedDates.delete(t), e.classList.remove("selected-date")) : (this.selectedDates.add(t), e.classList.add("selected-date")), this.updateChanceText() }) }) } updateChanceText() { let e = this.selectedDates.size, t = [{ min: 1, max: 4, text: "klein-gemiddeld" }, { min: 5, max: 8, text: "gemiddeld" }, { min: 9, max: 1 / 0, text: "gemiddeld-groot" },].find(t => e >= t.min && e <= t.max), i = t ? t.text : "- (selecteer data)"; this.chanceElement.textContent = i, this.formData.course_dates = [...this.selectedDates].sort((e, t) => new Date(e) - new Date(t)), this.formData.chance = i } getLastDayOfMonth() { let e = new Date, t = new Date(e.getFullYear(), e.getMonth() + 1, 0).getDate(), i = this.dutchMonths[e.getMonth()]; return `${t} ${i}` } processDescriptionItems(e) { return e.map(e => "string" == typeof e.description ? { ...e, description: e.description.replace("{{ getLastDayOfMonth }}", this.getLastDayOfMonth()) } : e) } async getPackages() { let e = this.urls.plans; try { this.enableLoader(); let t = await fetch(e), i = await t.json(); this.allAvailablePlans = i.filter(e => "PUBLIC" === e.type && e.license_type === this.formData.license_type).map(({ name: e, description_items: t, price: i, old_price: a, discount_label: s }) => ({ name: e, description_items: this.processDescriptionItems(t), price: i, old_price: a, discount_label: s })), this.createPackages(this.allAvailablePlans) } catch (a) { console.log(a) } finally { this.disableLoader() } } createPackages(e) { let t = document.getElementById("packageList"); this.cleanInterface(t), e.forEach(e => { let i = document.createElement("div"); i.className = "aanmelden_package-item", i.setAttribute("data-package-name", e.name), i.addEventListener("click", () => { this.setData("package_name", e.name), this.packageSelected = e; let t = document.querySelectorAll(".aanmelden_package-item"); t.forEach(e => { e.classList.remove("selected-option") }), i.classList.add("selected-option") }), this.addPackageItemElements(i, e), t.appendChild(i) }) } createSvgElement(e) { let t = document.createElement("template"); return e = e.trim(), t.innerHTML = e, t.content.firstChild } createElementWithClass(e, t) { let i = document.createElement(e); return i.className = t, i } createTextElement(e, t, i, a) { let s = this.createElementWithClass(e, i); return s.id = t, s.textContent = a, s } appendSvgToElement(e, t) { let i = this.createSvgElement(t); e.appendChild(i) } addPackageItemElements(e, t, i = !1) {
      let a = this.createElementWithClass("div", "aanmelden_package-info"), s = this.createElementWithClass("div", "margin-bottom margin-custom4"), n = this.createElementWithClass("div", "margin-bottom margin-xsmall"), l = this.createElementWithClass("div", "aanmelden_package-name"), r = i ? "aanmelden_package-separator_overzicht" : "aanmelden_package-separator", o = this.createElementWithClass("div", r), d = this.createElementWithClass("div", "aanmelden_package-price"), c = this.createTextElement("div", "packagePrice", "heading-style-h4", `${parseInt(t.price)}`), h = this.createTextElement("div", "packagePriceSmall", "text-size-medium text-weight-bold", `${(t.price % 1 * 100).toFixed(0).padStart(2, "0")}`), m = this.createTextElement("div", "packageName", "text-weight-bold", t.name); this.appendSvgToElement(l, '<svg data-v-035cdeba="" width="16" height="15" viewBox="0 0 16 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.4 5.6V4C14.4 3.78783 14.3157 3.58434 14.1657 3.43431C14.0157 3.28429 13.8122 3.2 13.6 3.2H12.8V4C12.8 4.21217 12.7157 4.41566 12.5657 4.56568C12.4157 4.71571 12.2122 4.8 12 4.8C11.7878 4.8 11.5843 4.71571 11.4343 4.56568C11.2843 4.41566 11.2 4.21217 11.2 4V3.2H4.8V4C4.8 4.21217 4.71571 4.41566 4.56569 4.56568C4.41566 4.71571 4.21217 4.8 4 4.8C3.78783 4.8 3.58434 4.71571 3.43431 4.56568C3.28429 4.41566 3.2 4.21217 3.2 4V3.2H2.4C2.18783 3.2 1.98434 3.28429 1.83431 3.43431C1.68429 3.58434 1.6 3.78783 1.6 4V5.6H14.4ZM14.4 7.2H1.6V12C1.6 12.2122 1.68429 12.4157 1.83431 12.5657C1.98434 12.7157 2.18783 12.8 2.4 12.8H13.6C13.8122 12.8 14.0157 12.7157 14.1657 12.5657C14.3157 12.4157 14.4 12.2122 14.4 12V7.2ZM12.8 1.6H13.6C14.2365 1.6 14.847 1.85286 15.2971 2.30294C15.7471 2.75303 16 3.36348 16 4V12C16 12.6365 15.7471 13.247 15.2971 13.6971C14.847 14.1471 14.2365 14.4 13.6 14.4H2.4C1.76348 14.4 1.15303 14.1471 0.702944 13.6971C0.252856 13.247 0 12.6365 0 12L0 4C0 3.36348 0.252856 2.75303 0.702944 2.30294C1.15303 1.85286 1.76348 1.6 2.4 1.6H3.2V0.8C3.2 0.587827 3.28429 0.384344 3.43431 0.234315C3.58434 0.0842855 3.78783 0 4 0C4.21217 0 4.41566 0.0842855 4.56569 0.234315C4.71571 0.384344 4.8 0.587827 4.8 0.8V1.6H11.2V0.8C11.2 0.587827 11.2843 0.384344 11.4343 0.234315C11.5843 0.0842855 11.7878 0 12 0C12.2122 0 12.4157 0.0842855 12.5657 0.234315C12.7157 0.384344 12.8 0.587827 12.8 0.8V1.6Z" fill="#161616"></path></svg>'), d.append(c, h), s.appendChild(d), n.appendChild(l), l.appendChild(m), a.append(s, n, o); let p = this.createElementWithClass("div", "margin-top margin-xsmall"), u = this.createElementWithClass("div", "aanmelden_package-list"); p.appendChild(u), t.description_items.forEach(e => {
        let t = this.createElementWithClass("div", "aanmelden_package-description"); this.appendSvgToElement(t, `<svg width="10" height="8" viewBox="0 0 10 8" fill="none" xmlns="http://www.w3.org/2000/svg">
                                          <g clip-path="url(#clip0_410_3698)">
                                          <path fill-rule="evenodd" clip-rule="evenodd" d="M9.65024 2.26327L5.00125 7.41733C4.30025 8.19433 3.16425 8.19433 2.46225 7.41733L0.35025 5.07528C-0.11675 4.55828 -0.11675 3.71929 0.35025 3.20029C0.81725 2.68329 1.57425 2.68329 2.04025 3.20029L2.88425 4.13632C3.35225 4.65532 4.11125 4.65532 4.57925 4.13632L7.95926 0.38925C8.42526 -0.12975 9.18323 -0.12975 9.64923 0.38925C10.1172 0.90625 10.1172 1.74627 9.64923 2.26327H9.65024Z" fill="#E1227A"></path>
                                          </g>
                                          <defs>
                                          <clipPath id="clip0_410_3698">
                                          <rect width="10" height="8" fill="white"></rect>
                                          </clipPath>
                                          </defs>
                                          </svg >`); let i = this.createElementWithClass("div", "text-size-tiny"); i.textContent = e.description, t.appendChild(i), u.appendChild(t)
      }), a.appendChild(p), e.appendChild(a); let g = this.createElementWithClass("div", "aanmelden_package-label"); if (t.discount_label && g.appendChild(this.createTextElement("div", "packageDiscountLabel", "text-size-xtiny text-weight-bold text-style-allcaps", t.discount_label)), t.old_price) { let y = this.createElementWithClass("div", "aanmelden_package-label_price"); y.appendChild(this.createTextElement("div", "packageOldPrice", "heading-style-h6 text-weight-xbold", `€ ${parseInt(t.old_price)}`)), y.appendChild(this.createTextElement("div", "packageOldPriceSmall", "text-size-tiny text-weight-bold", `${(t.old_price % 1 * 100).toFixed(0).padStart(2, "0")}`)), y.appendChild(this.createElementWithClass("div", "online_pricing-separator is-aanmelden")), g.appendChild(y) } if (i || e.appendChild(g), i && t.old_price) { let f = t.old_price - t.price, _ = `${f.toFixed(2)}`, x = this.createElementWithClass("div", "margin-top margin-xsmall"), C = this.createElementWithClass("div", r), b = this.createElementWithClass("div", "margin-top margin-xsmall"), v = this.createElementWithClass("div", "overzicht_pricing-list"), E = this.createElementWithClass("div", "overzicht_pricing-item"), k = this.createTextElement("div", "", "text-weight-bold", "Subtotaal"), I = `${parseFloat(t.old_price).toFixed(2)}`, $ = this.createTextElement("div", "", "text-weight-bold", I), B = this.createElementWithClass("div", "overzicht_pricing-item"), D = this.createTextElement("div", "", "text-weight-bold text-color-pink", "Korting"), L = this.createTextElement("div", "", "text-weight-bold text-color-pink", _), S = this.createElementWithClass("div", "margin-top margin-xsmall"), T = this.createElementWithClass("div", "overzicht_pricing-total"), w = `Totaal: ${parseFloat(t.price).toFixed(2)}`, M = this.createTextElement("div", "", "text-size-large text-weight-bold", w); e.appendChild(x), e.appendChild(b), x.appendChild(C), b.appendChild(v), v.appendChild(E), v.appendChild(B), E.appendChild(k), E.appendChild($), B.appendChild(D), B.appendChild(L), T.appendChild(M), e.appendChild(S), S.appendChild(T) }
    } updateSvgVisibility() { let e = this.formData.license_type;["auto", "scooter", "motor"].forEach(t => { let i = `${t}Svg`, a = document.getElementById(i); a && (t === e ? a.classList.remove("hide") : a.classList.add("hide")) }) } updateRowVisibility() { let e = document.getElementById("locationsRow"), t = document.getElementById("datesRow"), i = this.formData.cities && this.formData.cities.length > 0 || this.formData.cbr_locations && this.formData.cbr_locations.length > 0, a = this.formData.course_names && this.formData.course_names.length > 0 || this.formData.course_dates && this.formData.course_dates.length > 0; i ? e.classList.add("active") : e.classList.remove("active"), a ? t.classList.add("active") : t.classList.remove("active") } completeResume() { Object.keys(this.resumeConfig).forEach(e => this.completeField(e)), this.completeDataInputs(), this.updateSvgVisibility() } completeField(e) { let t = this.resumeConfig[e]; if (!t) return; if (t.customHandler) { t.customHandler.call(this); return } let i = document.getElementById(t.elementId); if (!i) return; let a = this.formData[e]; i.textContent = t.textMap[a] ?? a; let s = i.querySelector(".overzicht_online-list"); if (s && i.removeChild(s), "course_type" === e && "online" === a) { let n = document.createElement("ul"); n.className = "overzicht_online-list", ["Videocursus", "CBR oefenexamens", "E-book"].forEach(e => { let t = document.createElement("li"); t.textContent = e, n.appendChild(t) }), i.appendChild(n) } } completeDataInputs() { Object.keys(this.resumeConfigInputs).forEach(e => { let t = this.resumeConfigInputs[e]; if (t && t.elementId) { let i = document.getElementById(t.elementId); i && (i.textContent = this.formData[e] ?? "-") } }) } completeCities() { let e = document.getElementById("citiesColumn"), t = document.getElementById(this.resumeConfig.cities.elementId); this.formData.cities.length > 0 ? (t.textContent = this.citiesNameSelected.join(", "), e.classList.remove("hide")) : e.classList.add("hide"), this.updateRowVisibility() } completeCbrLocations() { let e = this.formData.cbr_locations; if (!e) return; let t = document.getElementById("cbrsColumn"), i = document.getElementById(this.resumeConfig.cbr_locations.elementId); e.length > 0 ? (i.textContent = e.join(", "), t.classList.remove("hide")) : t.classList.add("hide"), this.updateRowVisibility() } completeCourseCategory() { let e = this.formData.course_category, t = document.getElementById({ per_dates: "zo-snel", per_month: "maand", calendar: "specifieke" }[e]); t && t.classList.add("active") } completeCourseNames() { let e = this.formData.course_category, t = document.getElementById("per_dates" === e ? "zo-snelResume" : "maandResume"); t && Array.isArray(this.formData.course_names) && this.formData.course_names.length > 0 ? (t.textContent = this.formData.course_names.join(", "), t.classList.remove("hide")) : t && t.classList.add("hide"), this.updateRowVisibility() } completeCourseDates() { let e = this.formData.course_dates, t = document.getElementById("specifiekeDates"); t.innerHTML = ""; let i = ["Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec",]; if (Array.isArray(e) && e.length > 0) { let a = e.sort((e, t) => new Date(e) - new Date(t)); a.forEach(e => { let a = new Date(e), s = document.createElement("div"); s.id = "daySelected", s.textContent = a.getDate(), s.classList.add("text-size-tiny", "text-weight-bold"); let n = document.createElement("div"); n.id = "monthSelected", n.textContent = i[a.getMonth()], n.classList.add("text-size-xtiny", "text-weight-bold"); let l = document.createElement("div"); l.classList.add("overzicht_info-date"), l.appendChild(s), l.appendChild(n), t.appendChild(l) }) } this.updateRowVisibility() } completePackage() { let e = document.getElementById(this.resumeConfig.package_name.elementId); if ("offline" === this.formData.course_type) { let t = document.getElementById("overzichtOffline"); t.classList.add("active") } else { let i = this.packageSelected; if (i) { e.innerHTML = ""; let a = document.createElement("div"); this.addPackageItemElements(a, i, !0), e.appendChild(a) } else e.textContent = "No se ha seleccionado ning\xc3\xban paquete." } } applySubmissionRules() { return Object.keys(this.submissionRules).forEach(e => { let t = this.formData[e], i = this.submissionRules[e][t]; i && i.forEach(e => { this.formData[e] = [] }) }), this.formData } async handleFinalStep() { let e = this.getData(), t = await this.sendDataBack(e); if (t) { let { course_type: i, is_mijn_reservation: a, payment_amount: s, auth_tokens: { access: n } } = t, l = "online" === i && a, r, o = { url: this.urls.package_start, payload: { package_starting_at: new Date }, token: n }, d = { url: this.urls.payment_link, payload: { method: "ideal", amount: s, final_redirect_url: this.urls.final_redirect_url, fail_redirect_url: this.urls.fail_redirect_url }, token: n }; if (l && await this.requestLinkPayment(o), r = await this.requestLinkPayment(d)) { let c = { ...t, ...r, buttonText: l ? "Betalen" : "Aanbetaling" }, h = JSON.parse(JSON.stringify(c)); localStorage.setItem("formData", JSON.stringify(h)), localStorage.setItem("userLoggedIn", !0), updateLoginButton(), this.redirectTo("/bestellen") } } } async requestLinkPayment({ url: e, payload: t, token: i }) { try { this.enableLoader(); let a = await fetch(e, { method: "POST", headers: { Authorization: `Bearer ${i}`, "Content-Type": "application/json" }, body: JSON.stringify(t) }); if (!a.ok) throw Error(`Error al enviar la solicitud: ${a.status} ${a.statusText}`); let s = await a.json(); return s } catch (n) { throw console.error("Error:", n.message), n } finally { this.disableLoader() } } async sendDataBack(e) { let t = this.urls.urlPostMultiStepForm, i = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(e) }; try { this.enableLoader(); let a = await fetch(t, i); if (!a.ok) throw Error("Error en la respuesta de la red"); let s = await a.json(); return s } catch (n) { return console.error("Error when sending data:", n), !1 } finally { this.disableLoader() } }
  } let t = [{ id: "step1", keyBack: "license_type", attribute: "data-license-type" }, { id: "step2", keyBack: "course_type", attribute: "data-course-type" }, { id: "step3", keyBack: "exam_type", attribute: "data-exam-type" }, { id: "step4Cities", keyBack: "cities" }, { id: "step4Cbr", keyBack: "cbr_locations" }, { id: "step4Mijn", keysBack: ["mijn_exam_location", "mijn_exam_datetime"] }, { id: "step5", keyBack: "course_category", attribute: "data-course-category" }, { id: "step6", keyBack: "course_names", attribute: "data-course-name", keyArray: !0 }, { id: "stepMonths", keyBack: "course_names", attribute: "data-course-name" }, { id: "stepCalendar", keyBack: "course_dates", attribute: "data-course-name" }, { id: "stepOnlinePackage", attribute: "data-package-name", form: "package_name", keyBack: "package_name" }, { id: "stepInputs", form: "allInputs", validations: { email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/ } }, { id: "overzicht", form: "Resume" },], i = new e(t); i.initialize()
} if ("/bestellen" === window.location.pathname) {
  localStorage.getItem("userLoggedIn") || (window.location.href = "/inloggen"); class a {
    constructor() { this.initialize() } initialize() { let e = localStorage.getItem("formData"); if (e) { let t = JSON.parse(e); this.displayOrderSummary(t), this.handleStoredData(t) } } updateSvgVisibility(e) { let t = e.license_type;["auto", "scooter", "motor"].forEach(e => { let i = `${e}Svg`, a = document.getElementById(i); a && (e === t ? a.classList.remove("hide") : a.classList.add("hide")) }) } updateRowVisibility(e) { let t = e.cities && e.cities.length > 0 || e.cbr_locations && e.cbr_locations.length > 0, i = e.course_names && e.course_names.length > 0 || e.course_dates && e.course_dates.length > 0, a = document.getElementById("locationsRow"), s = document.getElementById("datesRow"); a.classList.toggle("active", t), s.classList.toggle("active", i) } toggleElementVisibility(e, t) { let i = document.getElementById(e); i && (t ? i.classList.remove("hide") : i.classList.add("hide")) } getExamTypeText(e) { return ({ bth: "Standaard CBR examen (30 min): 48,-", bth_ve: "Verlengd CBR examen (45 min): 61,-", ath: "Standaard CBR examen (30 min): 48,-", ath_ve: "Verlengd CBR examen (45 min): 61,-", amth: "Standaard CBR examen (30 min): 48,-", amth_ve: "Verlengd CBR examen (45 min): 61,-", mijn: "Ik heb zelf al een examen gereserveerd" })[e] } displayOrderSummary(e) {
      let t = { license_type: { elementId: "licenseText", textMap: { motor: "Motortheorie", auto: "Autotheorie", scooter: "Scootertheorie" } }, course_type: { elementId: "courseTypeText", textMap: { online: "Volledige online cursus", offline: "Dagcursus met aansluitend het examen: 99,-" } } }; Object.keys(t).forEach(i => { let a = t[i], s = document.getElementById(a.elementId); if (!s) return; let n = e[i]; if (a.textMap[n] ? s.textContent = a.textMap[n] : s.textContent = n, "course_type" === i && "online" === n) { let l = s.querySelector(".overzicht_online-list"); l && s.removeChild(l); let r = document.createElement("ul"); r.className = "overzicht_online-list", ["Videocursus", "CBR oefenexamens", "E-book"].forEach(e => { let t = document.createElement("li"); t.textContent = e, r.appendChild(t) }), s.appendChild(r) } }); let i = { per_dates: "zo-snel", per_month: "maand", calendar: "specifieke" }[e.course_category]; if (i) { let a = document.getElementById(i); a.classList.add("active") } let s = this.getExamTypeText(e.product); if (s) { let n = document.getElementById("examTypeText"); n.textContent = s } this.toggleElementVisibility("citiesColumn", e.cities && e.cities.length > 0), this.toggleElementVisibility("cbrsColumn", e.cbr_locations && e.cbr_locations.length > 0); let l = document.getElementById("totaalText"), r = document.getElementById("aanbetalingText"); if ("offline" === e.course_type ? (l && (l.textContent = "De theoriecursus in 1 dag met aansluitend het CBR examen kost 99,- (exclusief CBR examenkosten). Ons online lesmateriaal t.w.v. 29,- zit hier al bij inbegrepen. Voor het reserveren van het CBR examen hanteren we exact dezelfde tarieven als het CBR die bovenop de kosten van de theoriecursus komen. Een standaard examen kost 48,- en een verlengd examen kost 61,-. Het bedrag van de theoriecursus kun je via iDeal betalen of per bank naar ons overboeken. Voor dit laatste kun je contact met ons opnemen via de telefoon of e-mail."), r && (r.textContent = "We vragen om een aanbetaling om het CBR examen te reserveren en omdat je na het voldoen hiervan direct twee maanden lang toegang krijgt tot ons online lesmateriaal t.w.v. 29,-. De kosten van het theorie examen moeten wij namelijk vooruitbetalen aan het CBR.")) : "online" === e.course_type && (l && (l.textContent = `De prijzen van onze online theorie pakketten verschillen. Nutheorie online heeft namelijk verschillende pakketten die allemaal een volledige videocursus, een uitgebreid e-book en honderden oefenvragen bevatten maar anders zijn qua duur van toegankelijkheid en het aantal vergelijkbare CBR examens waarmee je kunt oefenen. Voor het reserveren van het CBR examen hanteren we exact dezelfde tarieven als het CBR die bovenop de kosten van de theoriecursus komen. Een standaard examen kost 48,- en een verlengd examen kost 61,-. Het bedrag van de cursus kun je via iDeal betalen of per bank naar ons overboeken. Voor dit laatste kun je contact met ons opnemen via de telefoon of e-mail.
              `), r && (r.textContent = "We vragen om een aanbetaling om enerzijds het CBR examen te reserveren. De kosten van het theorie examen moeten wij namelijk vooruitbetalen aan het CBR. Anderzijds betaal je middels de aanbetaling direct een gedeelte van het pakket om te voorkomen dat er misbruik wordt gemaakt van ons vermogen om snel het CBR examen te kunnen reserveren.")), e.license_type) { let o = document.getElementById("licenseText"); o.textContent = e.license_type } if (e.course_type) { let d = document.getElementById("courseTypeText"); d.textContent = e.course_type } if (e.exam_type) { let c = document.getElementById("examTypeText"); c.textContent = e.exam_type } if (e.cities && e.cities.length > 0) { let h = document.getElementById("citiesText"); h.textContent = e.cities.join(", ") } if (e.cbr_locations && e.cbr_locations.length > 0) { let m = document.getElementById("cbrLocationsText"); m.textContent = e.cbr_locations.join(", ") } if (e.first_name) { let p = document.getElementById("firstNameText"); p.textContent = e.first_name } if (e.last_name) { let u = document.getElementById("lastNameText"); u.textContent = e.last_name } if (e.nickname) { let g = document.getElementById("nicknameText"); g.textContent = e.nickname } if (e.birth_date) { let y = document.getElementById("birthDateText"); y.textContent = e.birth_date } if (e.phone) { let f = document.getElementById("phoneText"); f.textContent = e.phone } if (e.email) { let _ = document.getElementById("emailText"); _.textContent = e.email } if (e.address_1) { let x = document.getElementById("address1Text"); x.textContent = e.address_1 } if (e.address_2) { let C = document.getElementById("address2Text"); C.textContent = e.address_2 } if (e.address_3) { let b = document.getElementById("address3Text"); b.textContent = e.address_3 } switch (e.course_category) { case "per_dates": if (e.course_names && Array.isArray(e.course_names)) { let v = document.getElementById("zo-snelResume"); v.textContent = e.course_names.join(", ") } break; case "per_month": if (e.course_names && Array.isArray(e.course_names)) { let E = document.getElementById("maandResume"); E.textContent = e.course_names.join(", ") } break; case "calendar": if (e.course_dates && Array.isArray(e.course_dates)) { let k = document.getElementById("specifiekeDates"); k.innerHTML = ""; let I = ["Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"], $ = e.course_dates.sort((e, t) => new Date(e) - new Date(t)); $.forEach(e => { let t = new Date(e), i = document.createElement("div"); i.id = "daySelected", i.classList.add("text-size-tiny", "text-weight-bold"), i.textContent = t.getDate(); let a = document.createElement("div"); a.id = "monthSelected", a.classList.add("text-size-xtiny", "text-weight-bold"), a.textContent = I[t.getMonth()]; let s = document.createElement("div"); s.classList.add("overzicht_info-date"), s.appendChild(i), s.appendChild(a), k.appendChild(s) }) } }this.updateRowVisibility(e), this.updateSvgVisibility(e)
    } handleStoredData(e) { let t = document.getElementById("btnLink"), i = document.getElementById("btnText"), a = document.getElementById("btnAmount"), s = document.getElementById("aanbetalingTotal"); i.textContent = e.buttonText, a.textContent = `€ ${e.payment_amount}`; let n = parseFloat(e.payment_amount), l = ""; l = isNaN(n) ? "Error" : Math.floor(n) === n ? `${n},-` : `${n.toFixed(2)},-`, s.textContent = ` ${l}`, t.addEventListener("click", function () { window.location.href = e.payment_link }) }
  } new a
} function updateLoginButton() { let e = document.getElementById("btn-login"); localStorage.getItem("userLoggedIn") ? (e.textContent = "Uitloggen", e.href = "/inloggen") : (e.textContent = "Inloggen", e.href = "/inloggen") } document.addEventListener("DOMContentLoaded", updateLoginButton), document.getElementById("btn-login").addEventListener("click", e => { localStorage.getItem("userLoggedIn") && (localStorage.removeItem("userLoggedIn"), e.target.textContent = "Inloggen", window.location.href = "/inloggen") });
